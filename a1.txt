var createError = require('http-errors');
var express = require('express');
var path = require('path');
var cookieParser = require('cookie-parser');
var logger = require('morgan');

var passport = require('passport');
var authenticate = require('./authenticate');

const mongoose = require('mongoose');

const Dishes = require('./models/dishes');

const uploadRouter = require('./routes/uploadRouter');


var config = require('./config');

const url = config.mongoUrl;
const connect = mongoose.connect(url,{ useNewUrlParser: true , 
                                        useUnifiedTopology: true, 
                                        useCreateIndex: true,
                                        useFindAndModify: false});

connect.then((db) => {
    console.log("Connected correctly to server");
}, (err) => { console.log(err); });


var indexRouter = require('./routes/index');
var usersRouter = require('./routes/users');
var dishRouter = require('./routes/dishRouter');
var promoRouter = require('./routes/promoRouter');
var leaderRouter = require('./routes/leaderRouter');
var favoriteRouter = require('./routes/favoriteRouter');

var app = express();

// Secure traffic only
app.all('*', (req, res, next) => {
  if (req.secure) {
    return next();
  }
  else {
    res.redirect(307, 'https://' + req.hostname + ':' + app.get('secPort') + req.url);
  }
});

// view engine setup
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'jade');

app.use(logger('dev'));
app.use(express.json());
app.use(express.urlencoded({ extended: false }));

app.use('/imageUpload',uploadRouter);

//app.use(cookieParser('12345-67890-09876-54321'));

var session = require('express-session');
var FileStore = require('session-file-store')(session)



app.use(passport.initialize());
app.use(passport.session());

app.use('/', indexRouter);
app.use('/users', usersRouter);

app.use(express.static(path.join(__dirname, 'public')));

app.use('/dishes',dishRouter);
app.use('/promotions',promoRouter);
app.use('/leaders',leaderRouter);
app.use('/favorites',favoriteRouter);



// catch 404 and forward to error handler
app.use(function(req, res, next) {
  next(createError(404));
});

// error handler
app.use(function(err, req, res, next) {
  // set locals, only providing error in development
  res.locals.message = err.message;
  res.locals.error = req.app.get('env') === 'development' ? err : {};

  // render the error page
  res.status(err.status || 500);
  res.render('error');
});

module.exports = app;
.............................................................
const mongoose = require('mongoose');


const Schema = mongoose.Schema;

require('mongoose-currency').loadType(mongoose);
const Currency = mongoose.Types.Currency;

var favoriteSchema = new Schema({
    user: {
        type: mongoose.Schema.Types.ObjectId,
        ref: 'User'
    },
    dishes: [
    	{
    		type: mongoose.Schema.Types.ObjectId,
    		ref: 'Dish'
    	}
    ]
}, {
    timestamps: true
});

let Favorites = mongoose.model('Favorite', favoriteSchema);

module.exports = Favorites;
...............................................................
const express = require('express');
const bodyParser = require('body-parser');
const mongoose = require('mongoose');
const cors = require('./cors');

const Favorites = require('../models/favorites'); 

const favoriteRouter = express.Router();

let authenticate = require('../authenticate');

favoriteRouter.use(bodyParser.json());

favoriteRouter.route('/')
.options(cors.corsWithOptions, (req,res)=> {res.sendStatus(200);})
.get(cors.corsWithOptions,authenticate.verifyUser,(req,res,next) => {
	Favorites.findOne({user : req.user._id})
    .populate('user')
    .populate('dishes')
    .then((favorites) => {
        res.statusCode = 200;
        res.setHeader('Content-Type', 'application/json');
        res.json(favorites);
    }, (err) => next(err))
    .catch((err) => next(err));
})
.post(cors.corsWithOptions,authenticate.verifyUser,(req,res,next) => {
	console.log(req.user._id)
	Favorites.findOne({user : req.user._id})
    .then((favorite) => {
    	console.log(req.body)
    	console.log(favorite)
        if (favorite != null) {
        	for(let i of req.body){
        		let f = false
        		for(let j of favorite.dishes){
        			
	        		if(i._id.toString() === j._id.toString()){
	        			f = true
	        		}
        		}
        		if(f == false){
        			favorite.dishes.push(i)
        		}
        	}
        	
            favorite.save()
            .then((favorite) => {
                Favorites.findById(favorite._id)
                .then((favorite) => {
                    res.statusCode = 200;
                    res.setHeader('Content-Type', 'application/json');
                    res.json(favorite);
                })            
            }, (err) => next(err));
        }
        else {
            let fav = new Favorites({user: req.user._id,dishes: req.body});
            Favorites.create(fav)
		    .then((favorite) => {
		        res.statusCode = 200;
		        res.setHeader('Content-Type', 'application/json');
		        res.json(favorite);
		    }, (err) => next(err))
		    .catch((err) => next(err));
        }
    }, (err) => next(err))
    .catch((err) => next(err));
})
.put(cors.corsWithOptions,cors.corsWithOptions,authenticate.verifyUser,(req, res, next) => {
    res.statusCode = 403;
    res.end('PUT operation not supported on /favorites');
})
.delete(cors.corsWithOptions,authenticate.verifyUser,(req, res, next) => {
	Favorites.deleteOne({ user: req.user._id })
    .then((resp) => {
        res.statusCode = 200;
        res.setHeader('Content-Type', 'application/json');
        res.json(resp);
    }, (err) => next(err))
    .catch((err) => next(err));
});

favoriteRouter.route('/:dishId')
.options(cors.corsWithOptions, (req,res)=> {res.sendStatus(200);})
.get(cors.corsWithOptions,authenticate.verifyUser,(req, res, next) => {
    res.statusCode = 403;
    res.end('GET operation not supported on /favorites/dishId');
})
.post(cors.corsWithOptions,authenticate.verifyUser,(req,res,next) => {
	console.log(req.user._id)
	Favorites.findOne({user : req.user._id})
    .then((favorite) => {

        if (favorite != null) {
        	
    		let f = false
    		for(let j of favorite.dishes){
    			
        		if(req.params.dishId === j._id.toString()){
        			f = true
        		}
    		}
    		if(f == false){
    			const newId = new mongoose.Types.ObjectId(req.params.dishId);
    			favorite.dishes.push(newId)
    		}
        	
            favorite.save()
            .then((favorite) => {
                Favorites.findById(favorite._id)
                .then((favorite) => {
                    res.statusCode = 200;
                    res.setHeader('Content-Type', 'application/json');
                    res.json(favorite);
                })            
            }, (err) => next(err));
        }
        else {
            let fav = new Favorites({user: req.user._id});
            console.log(fav)
            const newId = new mongoose.Types.ObjectId(req.params.dishId);
			fav.dishes.push(newId)
            Favorites.create(fav)
		    .then((favorite) => {
		        res.statusCode = 200;
		        res.setHeader('Content-Type', 'application/json');
		        res.json(favorite);
		    }, (err) => next(err))
		    .catch((err) => next(err));
        }
    }, (err) => next(err))
    .catch((err) => next(err));
})
.put(cors.corsWithOptions,authenticate.verifyUser,authenticate.verifyAdmin,(req, res, next) => {
    res.statusCode = 403;
    res.end('PUT operation not supported on /favorites/dishId');
})
.delete(cors.corsWithOptions,authenticate.verifyUser,(req, res, next) => {
	Favorites.updateOne( {user: req.user._id}, { $pullAll: {dishes: [req.params.dishId] } } )
	.then((fav) => {
                    Favorites.findOne({user : req.user._id})
                    .then((fav) => {
                        res.statusCode = 200;
                        res.setHeader('Content-Type', 'application/json');
                        res.json(fav);  
                    })               
                }, (err) => next(err))
    .catch((err) => next(err));
});

module.exports = favoriteRouter;